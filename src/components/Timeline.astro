---
import { Image } from 'astro:assets';
import imagenPrelatura from '@assets/images/historia/prelatura.webp';
import data from '@data';

const { historia } = data;

const imagenes_historia = {
    'prelatura.webp': imagenPrelatura
} as const

const TimeLine = historia.eventos.map(evento => ({
    ...evento,
    imagen: imagenes_historia[evento.imagen as keyof typeof imagenes_historia]
}))
---

<section class="relative py-24 overflow-hidden" aria-labelledby="historia-title">
    <!-- Fondo mejorado con múltiples capas -->
    <div class="absolute inset-0">
        <div class="absolute inset-0 bg-gradient-to-b from-black via-neutral-900 to-black"></div>
        <!-- Patrón de puntos mejorado -->
        <div class="absolute inset-0 opacity-[0.03]" 
             style="background-image: radial-gradient(#ffffff 1px, transparent 1px); background-size: 32px 32px;">
        </div>
        <!-- Gradiente de acento -->
        <div class="absolute inset-0 bg-gradient-to-tr from-[#0052cc]/20 via-transparent to-transparent"></div>
    </div>

    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Encabezado -->
        <header class="max-w-2xl mx-auto text-center mb-24">
            <div class="inline-flex items-center justify-center space-x-3 mb-6">
                <div class="h-[1px] w-12 bg-gradient-to-r from-transparent via-[#0052cc] to-transparent"></div>
                <span class="px-4 py-2 rounded-full bg-[#0052cc]/20 text-sm font-medium text-[#66b3ff] tracking-wider border border-[#0052cc]/30">
                    {historia.header.label}
                </span>
                <div class="h-[1px] w-12 bg-gradient-to-r from-transparent via-[#0052cc] to-transparent"></div>
            </div>
            <h2 id="historia-title" class="text-3xl sm:text-4xl font-bold text-white mb-6">
                {historia.header.titulo1}
                <span class="relative whitespace-nowrap text-[#66b3ff]">
                    <svg aria-hidden="true" viewBox="0 0 418 42" class="absolute left-0 top-full h-[0.4em] w-full fill-[#66b3ff]/30" preserveAspectRatio="none">
                        <path d={historia.header.icono} />
                    </svg>
                    <span class="relative">{historia.header.span}</span>
                </span>
                {historia.header.titulo2}
            </h2>
            <p class="text-lg text-gray-300 max-w-prose mx-auto">
                {historia.header.descripcion}
            </p>
        </header>

        <!-- Línea de Tiempo -->
        <div class="relative">
            <!-- Línea base y de progreso -->
            <div class="absolute left-4 lg:left-1/2 lg:-translate-x-1/2 w-1 h-full bg-gray-700 linha-base"></div>
            <div class="absolute left-4 lg:left-1/2 lg:-translate-x-1/2 w-1 h-0 bg-[#0052cc] linha-progresso transition-all duration-300"></div>

            <!-- Eventos -->
            <div class="space-y-24">
                <!-- {historia.eventos.map((evento, index) => ( -->
                {TimeLine.map((evento, index) => (
                    <article class="relative milestone">
                        <!-- Punto indicador -->
                        <div class="absolute -left-[10px] lg:left-1/2 top-0 transform lg:-translate-x-1/2 z-10 flex items-center justify-center">
                            <div class="w-14 h-14 bg-gray-700 rounded-full border-4 border-gray-800 milestone-icon transition-colors duration-300 flex items-center justify-center">
                                <svg 
                                    viewBox="0 0 24 24" 
                                    class="w-8 h-8 milestone-icon-svg transition-colors duration-300" 
                                    fill="none" 
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    <path 
                                        d={evento.icono} 
                                        fill="currentColor"
                                    />
                                </svg>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 lg:grid-cols-2 lg:gap-24 gap-8 items-center pl-16 lg:pl-0">
                            <div class={`timeline-content opacity-0 translate-y-8 ${
                                index % 2 === 0 ? 'lg:order-1' : 'lg:order-2'
                            }`}>
                                <div class="bg-white/5 backdrop-blur-sm p-6 rounded-xl border border-white/10">
                                    <div class="space-y-4">
                                        <span class="inline-block px-3 py-1 bg-[#0052cc]/20 text-[#66b3ff] text-sm font-medium rounded-full">
                                            {evento.año}
                                        </span>
                                        <h3 class="text-xl font-semibold text-white">
                                            {evento.titulo}
                                        </h3>
                                        <p class="text-gray-300">
                                            {evento.descripcion}
                                        </p>
                                        {evento.logros && (
                                            <ul class="space-y-2 pt-4" role="list">
                                                {evento.logros.map(logro => (
                                                    <li class="flex items-start gap-2 text-gray-300">
                                                        <span class="mt-1.5 w-1.5 h-1.5 rounded-full bg-[#0052cc] flex-shrink-0"></span>
                                                        <span>{logro}</span>
                                                    </li>
                                                ))}
                                            </ul>
                                        )}
                                    </div>
                                </div>
                            </div>

                            <div class={`timeline-content opacity-0 -translate-y-8 hidden sm:block ${
                                index % 2 === 0 ? 'lg:order-2' : 'lg:order-1'
                            }`}>
                                <div class="relative group">
                                    <div class="absolute -inset-4 bg-gradient-to-r from-[#0052cc]/20 to-transparent rounded-xl opacity-0 blur-xl transition-opacity duration-300 group-hover:opacity-100"></div>
                                    <figure class="relative rounded-xl overflow-hidden bg-gray-800 aspect-[4/3]">
                                        <Image
                                            src={evento.imagen}
                                            alt={evento.imagenAlt}
                                            class="w-full h-full object-cover transform transition-transform duration-500"
                                            loading="lazy"
                                            decoding="async"
                                            width={600}
                                            height={450}
                                        />
                                        {/* Gradiente negro con fecha */}
                                        <div class="absolute inset-0 bg-gradient-to-t from-black via-black/50 to-transparent">
                                            <div class="absolute bottom-0 left-0 right-0 p-4">
                                                <span class="text-white font-medium text-lg">
                                                    {evento.fecha}
                                                </span>
                                            </div>
                                        </div>
                                    </figure>
                                </div>
                            </div>
                        </div>
                    </article>
                ))}
            </div>
        </div>
    </div>
</section>

<script>
const animateTimeline = () => {
    const lineaProgreso = document.querySelector('.linha-progresso') as HTMLElement | null;
    const lineaBase = document.querySelector('.linha-base') as HTMLElement | null;
    const hitos = document.querySelectorAll('.milestone');
    
    if (!lineaProgreso || !lineaBase) return;

    const updateProgress = () => {
        const viewportHeight = window.innerHeight;
        const scrollTop = window.scrollY;
        const baseRect = lineaBase.getBoundingClientRect();
        const baseTop = baseRect.top + scrollTop;
        const baseHeight = lineaBase.offsetHeight || 0;

        const progressTop = scrollTop - baseTop + viewportHeight * 0.6;
        const progressHeight = Math.max(0, Math.min(baseHeight, progressTop));
        lineaProgreso.style.height = `${progressHeight}px`;

        hitos.forEach((hito) => {
            const hitoRect = hito.getBoundingClientRect();
            const hitoTop = hitoRect.top;
            const iconElement = hito.querySelector('.milestone-icon');
            const contentElements = hito.querySelectorAll('.timeline-content');

            if (hitoTop < viewportHeight * 0.75) {
                iconElement?.classList.add('active');
                contentElements.forEach(content => {
                    content.classList.add('active');
                });
            } else {
                iconElement?.classList.remove('active');
                contentElements.forEach(content => {
                    content.classList.remove('active');
                });
            }
        });
    };

    let ticking = false;
    const onScroll = () => {
        if (!ticking) {
            window.requestAnimationFrame(() => {
                updateProgress();
                ticking = false;
            });
            ticking = true;
        }
    };

    window.addEventListener('scroll', onScroll, { passive: true });
    window.addEventListener('resize', updateProgress, { passive: true });
    updateProgress();

    return () => {
        window.removeEventListener('scroll', onScroll);
        window.removeEventListener('resize', updateProgress);
    };
};

document.addEventListener('astro:page-load', animateTimeline);
</script>

<style>
/* Estilos base */
.timeline-content {
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
}

.timeline-content.active {
    transform: translateY(0);
    opacity: 1;
}

/* Estilos para el punto indicador y su ícono */
.milestone-icon {
    position: relative;
    transition: background-color 0.3s ease;
}

.milestone-icon-svg {
    color: #4A5568;
    transition: color 0.3s ease;
}

.milestone-icon.active {
    background-color: #0052cc;
}

.milestone-icon.active .milestone-icon-svg {
    color: white;
}

/* Soporte para preferencias de movimiento reducido */
@media (prefers-reduced-motion: reduce) {
    .timeline-content,
    .milestone-icon,
    .transition-all,
    .transition-transform,
    .transition-colors {
        transition: none !important;
        transform: none !important;
        animation: none !important;
    }
    
    .timeline-content {
        opacity: 1;
    }
}
</style>