---
import { Image } from 'astro:assets';
import ImagenFondo from '@assets/images/hero/about_hero.webp';
import ImagenVirgen from '@assets/images/historia/madre-amor-hermoso.webp';
import ImagenSanto from '@assets/images/historia/josemaria-escriva.webp';
import data from '@data';

const imagenes_santos = {
    'madre-amor-hermoso.webp': ImagenVirgen,
    'josemaria-escriva.webp': ImagenSanto
} as const;

const { identidad } = data;

// Procesamos los santos con sus imágenes correspondientes
const santosConImagenes = identidad.santosPatronos.map(santo => ({
    ...santo,
    imagen: imagenes_santos[santo.imagen as keyof typeof imagenes_santos]
}));
---

<section class="relative py-8 sm:py-12 lg:py-24 overflow-hidden" aria-labelledby="identidad-title">
    <!-- Fondo mejorado -->
    <div class="absolute inset-0">
        <div class="absolute inset-0 bg-gradient-to-br from-black via-black/95 to-[#0052cc]/40"></div>
        <Image
            src={ImagenFondo}
            alt={identidad.header.imagenAltFondo}
            class="w-full h-full object-cover opacity-20 motion-safe:animate-subtle-zoom"
            width={1920}
            height={1080}
            loading="eager"
        />
        <div class="absolute inset-0 opacity-[0.03]" 
             style="background-image: radial-gradient(#ffffff 1px, transparent 1px); background-size: 32px 32px;">
        </div>
    </div>

    <div class="relative w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid lg:grid-cols-12 gap-8 lg:gap-12">
            <!-- Columna Izquierda -->
            <div class="lg:col-span-5 lg:sticky lg:top-8 space-y-6 sm:space-y-8">
                <header class="space-y-4 sm:space-y-6">
                    <div class="flex items-center gap-3 flex-wrap">
                        <div class="flex-shrink-0 w-12 h-[2px] bg-gradient-to-r from-[#0052cc] to-[#0052cc]/50"></div>
                        <span class="px-3 py-1 rounded-full bg-[#0052cc]/20 text-[#66b3ff] font-medium tracking-wider text-sm border border-[#0052cc]/30">
                            {identidad.header.label}
                        </span>
                    </div>
                    <h2 id="identidad-title" class="text-2xl sm:text-3xl lg:text-4xl font-bold text-white leading-tight break-words">
                        {identidad.header.titulo}
                        <span class="relative block text-[#66b3ff] mt-2">
                            {identidad.header.span}
                            <svg aria-hidden="true" viewBox="0 0 418 42" class="absolute left-0 top-full h-[0.3em] w-full fill-[#66b3ff]/30" preserveAspectRatio="none">
                                <path d={identidad.header.icono} />
                            </svg>
                        </span>
                    </h2>
                    <p class="text-base sm:text-lg text-gray-300 leading-relaxed max-w-prose break-words">
                        {identidad.header.descripcion}
                    </p>
                </header>

                <!-- Valores Católicos -->
                <div class="space-y-4">
                    {identidad.valoresCatolicos.map(valor => (
                        <div class="group">
                            <article class="relative flex items-start gap-3 sm:gap-4 p-3 sm:p-4 rounded-xl hover:bg-white/5 transition-colors duration-300">
                                <span class="flex-none w-10 h-10 sm:w-12 sm:h-12 rounded-lg bg-[#0052cc]/20 flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 sm:w-6 sm:h-6 text-[#66b3ff]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d={valor.icono} />
                                    </svg>
                                </span>
                                <div class="min-w-0 flex-1">
                                    <h3 class="text-base sm:text-lg font-semibold text-white">
                                        {valor.titulo}
                                    </h3>
                                    <p class="mt-1 text-sm sm:text-base text-gray-300 break-words">{valor.descripcion}</p>
                                </div>
                            </article>
                        </div>
                    ))}
                </div>
            </div>

            <!-- Columna Derecha: Slider de Santos -->
            <div class="lg:col-span-7 space-y-8">
                <div class="relative rounded-xl overflow-hidden bg-white/5 backdrop-blur-sm border border-white/10">
                    <!-- Slider Container -->
                    <div class="overflow-hidden touch-pan-x" id="santos-slider">
                        <div class="flex hardware-accelerated" id="santos-track">
                            {santosConImagenes.map((santo) => (
                                <article 
                                    class="w-full flex-shrink-0 p-4 sm:p-6 slide-item"
                                >
                                    <div class="flex flex-col gap-4 max-w-2xl mx-auto">
                                        <!-- Contenedor de imagen con tamaño fijo -->
                                        <div class="relative w-48 h-48 mx-auto">
                                            <Image 
                                                src={santo.imagen}
                                                alt={`Imagen de ${santo.nombre}`}
                                                width={192}
                                                height={192}
                                            />
                                        </div>

                                        <div class="flex-1 space-y-3">
                                            <div class="text-center">
                                                <h3 class="text-xl sm:text-2xl font-bold text-white">
                                                    {santo.nombre}
                                                </h3>
                                                <p class="text-[#66b3ff] font-medium text-sm sm:text-base">
                                                    {santo.titulo}
                                                </p>
                                            </div>
                                            <p class="text-sm sm:text-base text-gray-300 leading-relaxed break-words">
                                                {santo.descripcion}
                                            </p>
                                            {santo.atributos && (
                                                <ul class="grid grid-cols-1 gap-2 pt-2">
                                                    {santo.atributos.map(atributo => (
                                                        <li class="flex items-start gap-2">
                                                            <span class="mt-1.5 w-1.5 h-1.5 rounded-full bg-[#0052cc] flex-shrink-0"></span>
                                                            <span class="text-sm text-gray-300 break-words">{atributo}</span>
                                                        </li>
                                                    ))}
                                                </ul>
                                            )}
                                        </div>
                                    </div>
                                </article>
                            ))}
                        </div>
                    </div>

                    <!-- Controles del Slider -->
                    <div class="absolute top-1/2 -translate-y-1/2 w-full flex justify-between pointer-events-none px-2 sm:px-4">
                        <button 
                            class="w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-black/70 backdrop-blur-sm border border-white/20 flex items-center justify-center text-white pointer-events-auto focus:outline-none focus:ring-2 focus:ring-[#0052cc] focus:ring-offset-2"
                            id="prev-slide"
                            aria-label="Anterior santo"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 sm:w-5 sm:h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                            </svg>
                        </button>
                        <button 
                            class="w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-black/70 backdrop-blur-sm border border-white/20 flex items-center justify-center text-white pointer-events-auto focus:outline-none focus:ring-2 focus:ring-[#0052cc] focus:ring-offset-2"
                            id="next-slide"
                            aria-label="Siguiente santo"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 sm:w-5 sm:h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                        </button>
                    </div>

                    <!-- Indicadores -->
                    <div class="absolute bottom-2 sm:bottom-4 left-0 right-0 flex justify-center gap-1.5 sm:gap-2">
                        {identidad.santosPatronos.map((_, index) => (
                            <button 
                                class="w-1.5 h-1.5 sm:w-2 sm:h-2 rounded-full bg-white/30 transition-colors duration-200 indicator-btn"
                                data-slide-index={index}
                                aria-label={`Ir al santo ${index + 1}`}
                            >
                                <span class="sr-only">Santo {index + 1}</span>
                            </button>
                        ))}
                    </div>
                </div>

                <!-- Prácticas Religiosas -->
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    {identidad.practicas.map(practica => (
                        <article class="p-4 sm:p-6 rounded-xl bg-white/5 backdrop-blur-sm border border-white/10">
                            <div class="flex items-start gap-3">
                                <span class="flex-shrink-0 w-8 h-8 sm:w-10 sm:h-10 rounded-lg bg-[#0052cc]/20 flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 sm:w-5 sm:h-5 text-[#66b3ff]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d={practica.icono} />
                                    </svg>
                                </span>
                                <div class="min-w-0 flex-1">
                                    <h4 class="text-base sm:text-lg font-medium text-white">{practica.titulo}</h4>
                                    <p class="mt-1 text-sm text-gray-300 break-words">{practica.descripcion}</p>
                                </div>
                            </div>
                        </article>
                    ))}
                </div>
            </div>
        </div>
    </div>
    <div class="absolute top-0 -z-10 left-0 w-full h-full bg-black" aria-hidden="true"></div>
</section>

<script>
    const initSlider = () => {
        const track = document.getElementById('santos-track') as HTMLElement;
        const slides = track?.children as HTMLCollectionOf<HTMLElement>;
        const prevButton = document.getElementById('prev-slide');
        const nextButton = document.getElementById('next-slide');
        const indicators = document.querySelectorAll('[data-slide-index]');
        
        if (!track || !slides.length || !prevButton || !nextButton) return;
    
        let currentIndex = 0;
        let startX: number;
        let isDragging = false;
        let dragStartPosition = 0;
        
        const updateSlideWidth = () => {
            const slideWidth = track.parentElement?.offsetWidth || 0;
            Array.from(slides).forEach(slide => {
                slide.style.width = `${slideWidth}px`;
            });
            return slideWidth;
        };
    
        let slideWidth = updateSlideWidth();
    
        // Actualizar indicadores
        const updateIndicators = (index: number) => {
            indicators.forEach((indicator, i) => {
                indicator.classList.toggle('bg-white', i === index);
                indicator.classList.toggle('bg-white/30', i !== index);
            });
        };
    
        const moveToSlide = (index: number, animate = true) => {
            const targetIndex = (index + slides.length) % slides.length;
            currentIndex = targetIndex;
            
            if (!animate) {
                track.style.transition = 'none';
            } else {
                track.style.transition = 'transform 500ms ease-out';
            }
            
            track.style.transform = `translateX(-${targetIndex * slideWidth}px)`;
            updateIndicators(targetIndex);
        };
    
        // Event Listeners para navegación táctil
        const handleDragStart = (e: TouchEvent | MouseEvent) => {
            isDragging = true;
            track.style.transition = 'none';
            startX = 'touches' in e ? e.touches[0].clientX : e.clientX;
            dragStartPosition = -currentIndex * slideWidth;
        };
    
        const handleDragMove = (e: TouchEvent | MouseEvent) => {
            if (!isDragging) return;
            
            const currentX = 'touches' in e ? e.touches[0].clientX : e.clientX;
            const diff = currentX - startX;
            const newPosition = dragStartPosition + diff;
            
            track.style.transform = `translateX(${newPosition}px)`;
        };
    
        const handleDragEnd = (e: TouchEvent | MouseEvent) => {
            if (!isDragging) return;
            isDragging = false;
            
            const currentX = 'touches' in e ? e.changedTouches[0].clientX : e.clientX;
            const diff = currentX - startX;
            const threshold = slideWidth / 3;
            
            if (Math.abs(diff) > threshold) {
                if (diff > 0) {
                    moveToSlide(currentIndex - 1);
                } else {
                    moveToSlide(currentIndex + 1);
                }
            } else {
                moveToSlide(currentIndex);
            }
        };
    
        // Event Listeners
        prevButton.addEventListener('click', () => moveToSlide(currentIndex - 1));
        nextButton.addEventListener('click', () => moveToSlide(currentIndex + 1));
        
        indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', () => moveToSlide(index));
        });
    
        // Touch events
        track.addEventListener('touchstart', handleDragStart);
        track.addEventListener('touchmove', handleDragMove);
        track.addEventListener('touchend', handleDragEnd);
    
        // Mouse events
        track.addEventListener('mousedown', handleDragStart);
        track.addEventListener('mousemove', handleDragMove);
        track.addEventListener('mouseup', handleDragEnd);
        track.addEventListener('mouseleave', handleDragEnd);
    
        // Resize handler
        const handleResize = () => {
            slideWidth = updateSlideWidth();
            moveToSlide(currentIndex, false);
        };
    
        window.addEventListener('resize', handleResize);
    
        // Autoslide
        let autoSlideInterval: number;
        
        const startAutoSlide = () => {
            autoSlideInterval = setInterval(() => {
                moveToSlide(currentIndex + 1);
            }, 5000) as unknown as number;
        };
    
        const stopAutoSlide = () => {
            clearInterval(autoSlideInterval);
        };
    
        track.addEventListener('mouseenter', stopAutoSlide);
        track.addEventListener('mouseleave', startAutoSlide);
        track.addEventListener('touchstart', stopAutoSlide);
        track.addEventListener('touchend', startAutoSlide);
    
        // Iniciar autoslide
        startAutoSlide();
    
        // Cleanup function
        return () => {
            window.removeEventListener('resize', handleResize);
            clearInterval(autoSlideInterval);
        };
    };
    
    document.addEventListener('astro:page-load', initSlider);
</script>

<style>
    /* Contenedor principal del slider
       Este es el elemento que mantiene todo el slider contenido y gestiona el overflow */
    #santos-slider {
        position: relative;
        width: 100%;
        max-width: 100vw;
        overflow: hidden;
        -webkit-overflow-scrolling: touch;
        overscroll-behavior-x: contain;
        contain: content;
    }
    
    /* Track del slider
       Este es el elemento que se mueve horizontalmente y contiene todos los slides */
    #santos-track {
        display: flex;
        width: 100%;
        height: 100%;
        transition: transform 500ms ease-out;
        will-change: transform;
        transform: translateZ(0);
        backface-visibility: hidden;
        -webkit-backface-visibility: hidden;
    }
    
    /* Elementos individuales del slider
       Cada slide debe tener un ancho fijo y no debe encogerse */
    .slide-item {
        flex: 0 0 auto;
        width: 100%;
        opacity: 1;
        transition: opacity 300ms ease-in-out;
        display: flex;
        flex-direction: column;
    }
    
    /* Contenido dentro de cada slide
       Asegura que el contenido se mantenga centrado y con el espaciado correcto */
    .slide-item > div {
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: start;
        gap: 1rem;
    }
    
    /* Optimizaciones para el rendimiento
       Mejora el rendimiento de las animaciones */
    .hardware-accelerated {
        transform: translateZ(0);
        backface-visibility: hidden;
        -webkit-backface-visibility: hidden;
        perspective: 1000px;
    }
    
    /* Controles del slider
       Estiliza los botones de navegación y asegura que sean clickeables */
    #prev-slide,
    #next-slide {
        opacity: 0.8;
        transition: opacity 200ms ease-in-out, transform 200ms ease-in-out;
    }
    
    #prev-slide:hover,
    #next-slide:hover {
        opacity: 1;
        transform: scale(1.1);
    }
    
    #prev-slide:active,
    #next-slide:active {
        transform: scale(0.95);
    }
    
    /* Indicadores
       Estiliza los puntos de navegación en la parte inferior */
    .indicator-btn {
        transition: all 200ms ease-in-out;
        cursor: pointer;
    }
    
    .indicator-btn:hover {
        background-color: rgba(255, 255, 255, 0.5);
    }
    
    /* Optimizaciones para dispositivos táctiles */
    .touch-pan-x {
        touch-action: pan-x pinch-zoom;
        -webkit-overflow-scrolling: touch;
    }
    
    /* Animaciones del fondo y elementos */
    @keyframes subtle-zoom {
        from { transform: scale(1); }
        to { transform: scale(1.05); }
    }
    
    .animate-subtle-zoom {
        animation: subtle-zoom 20s ease-in-out infinite alternate;
    }
    
    /* Utilidades de texto */
    .break-words {
        word-wrap: break-word;
        overflow-wrap: break-word;
        -webkit-hyphens: auto;
        -ms-hyphens: auto;
        hyphens: auto;
    }
    
    /* Optimizaciones responsive */
    @media (max-width: 640px) {
        #santos-slider {
            margin-left: -1rem;
            margin-right: -1rem;
            padding-left: 1rem;
            padding-right: 1rem;
        }
    
        .slide-item > div {
            gap: 0.75rem;
        }
    }
    
    /* Optimizaciones para dispositivos pequeños */
    @media (max-width: 380px) {
        .slide-item {
            padding: 0.75rem;
        }
    }
    
    /* Soporte para preferencias de reducción de movimiento */
    @media (prefers-reduced-motion: reduce) {
        .motion-safe\:animate-subtle-zoom,
        .animate-subtle-zoom,
        #santos-track,
        .slide-item,
        #prev-slide,
        #next-slide,
        .indicator-btn {
            transition: none !important;
            animation: none !important;
            transform: none !important;
        }
    }
    
    /* Mejoras de accesibilidad */
    @media (hover: hover) {
        #prev-slide:focus-visible,
        #next-slide:focus-visible,
        .indicator-btn:focus-visible {
            outline: 2px solid #0052cc;
            outline-offset: 2px;
        }
    }
    
    /* Optimizaciones de impresión */
    @media print {
        #santos-slider {
            overflow: visible;
        }
    
        #santos-track {
            transform: none !important;
            display: block;
        }
    
        .slide-item {
            break-inside: avoid;
            page-break-inside: avoid;
            width: 100% !important;
            margin-bottom: 2rem;
        }
    
        #prev-slide,
        #next-slide,
        .indicator-btn {
            display: none;
        }
    }
</style>