---
import { Image } from 'astro:assets';
import data from '@data';

const { identidad } = data;
---

<section class="relative py-24 overflow-hidden" aria-labelledby="identidad-title">
    <!-- Fondo -->
    <div class="absolute inset-0">
        <div class="absolute inset-0 bg-gradient-to-br from-black via-black/95 to-[#800020]/95"></div>
        <Image
            src={identidad.header.imagenFondo}
            alt={identidad.header.imagenAltFondo}
            class="w-full h-full object-cover opacity-20"
            width={1920}
            height={1080}
        />
    </div>

    <div class="relative max-w-7xl mx-auto px-6 lg:px-8">
        <div class="grid lg:grid-cols-12 gap-12 items-center">
            <!-- Columna Izquierda -->
            <div class="lg:col-span-5 space-y-8">
                <header class="space-y-4">
                    <div class="flex items-center gap-2">
                        <span class="w-12 h-[2px] bg-[#800020]"></span>
                        <span class="text-[#ff9eaa] font-medium tracking-wider text-sm uppercase">Nuestra Identidad</span>
                    </div>
                    <h2 id="identidad-title" class="text-4xl lg:text-5xl font-bold text-white leading-tight">
                        Formando en la
                        <span class="block text-[#ff9eaa] mt-2">Fe Cat칩lica</span>
                    </h2>
                    <p class="text-xl text-gray-300 leading-relaxed">
                        {identidad.header.descripcion}
                    </p>
                </header>

                <!-- Valores Cat칩licos -->
                <div class="space-y-6 pt-8">
                    {identidad.valoresCatolicos.map(valor => (
                        <div class="group relative">
                            <div class="absolute inset-0 bg-gradient-to-r from-[#800020]/20 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300 rounded-xl blur-xl"></div>
                            <article class="relative flex items-start gap-4 p-4">
                                <span class="flex-none w-12 h-12 rounded-lg bg-[#800020]/20 flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-[#ff9eaa]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d={valor.icono} />
                                    </svg>
                                </span>
                                <div>
                                    <h3 class="text-lg font-semibold text-white mb-2">{valor.titulo}</h3>
                                    <p class="text-gray-300">{valor.descripcion}</p>
                                </div>
                            </article>
                        </div>
                    ))}
                </div>
            </div>

            <!-- Columna Derecha: Slider de Santos -->
            <div class="lg:col-span-7 lg:pl-16">
                <div class="relative">
                    <!-- Slider Container -->
                    <div class="overflow-hidden" id="santos-slider">
                        <div class="flex transition-transform duration-500 ease-in-out" id="santos-track">
                            {identidad.santosPatronos.map((santo) => (
                                <article class="w-full flex-shrink-0 group">
                                    <div class="relative p-6 sm:p-8 bg-white/5 backdrop-blur-sm rounded-2xl group-hover:bg-white/10 transition-all duration-300">
                                        <div class="flex flex-col sm:flex-row gap-8">
                                            <!-- Imagen del Santo -->
                                            <div class="relative w-full sm:w-48 h-48">
                                                <div class="absolute inset-0 bg-gradient-to-br from-[#800020]/20 to-transparent rounded-xl"></div>
                                                <Image
                                                    src={santo.imagen}
                                                    alt={`Imagen de ${santo.nombre}`}
                                                    class="w-full h-full object-cover rounded-xl transform transition-transform duration-500 group-hover:scale-105"
                                                    width={192}
                                                    height={192}
                                                />
                                            </div>

                                            <!-- Informaci칩n del Santo -->
                                            <div class="flex-1 space-y-4">
                                                <header>
                                                    <h3 class="text-2xl font-bold text-white">{santo.nombre}</h3>
                                                    <p class="text-[#ff9eaa] font-medium">{santo.titulo}</p>
                                                </header>
                                                <p class="text-gray-300 leading-relaxed">
                                                    {santo.descripcion}
                                                </p>
                                                {santo.atributos && (
                                                    <ul class="grid grid-cols-2 gap-2 pt-4">
                                                        {santo.atributos.map(atributo => (
                                                            <li class="flex items-center gap-2 text-sm text-gray-300">
                                                                <span class="w-1.5 h-1.5 rounded-full bg-[#800020]"></span>
                                                                {atributo}
                                                            </li>
                                                        ))}
                                                    </ul>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                </article>
                            ))}
                        </div>
                    </div>

                    <!-- Controles del Slider -->
                    <div class="absolute top-1/2 -translate-y-1/2 w-full flex justify-between pointer-events-none">
                        <button 
                            class="transform -translate-x-4 w-12 h-12 rounded-full bg-white/10 backdrop-blur-sm border border-white/20 flex items-center justify-center text-white hover:bg-white/20 transition-all duration-300 pointer-events-auto focus:outline-none focus:ring-2 focus:ring-[#800020]"
                            id="prev-slide"
                            aria-label="Anterior santo"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                            </svg>
                        </button>
                        <button 
                            class="transform translate-x-4 w-12 h-12 rounded-full bg-white/10 backdrop-blur-sm border border-white/20 flex items-center justify-center text-white hover:bg-white/20 transition-all duration-300 pointer-events-auto focus:outline-none focus:ring-2 focus:ring-[#800020]"
                            id="next-slide"
                            aria-label="Siguiente santo"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                        </button>
                    </div>
                </div>

                <!-- Pr치cticas Religiosas -->
                <div class="grid grid-cols-2 gap-4 mt-12">
                    {identidad.practicas.map(practica => (
                        <article class="p-6 rounded-xl bg-white/5 backdrop-blur-sm border border-white/10 hover:bg-white/10 transition-colors duration-300">
                            <div class="flex items-center gap-3 mb-3">
                                <span class="w-8 h-8 rounded-lg bg-[#800020]/20 flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 text-[#ff9eaa]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d={practica.icono} />
                                    </svg>
                                </span>
                                <h4 class="text-white font-medium">{practica.titulo}</h4>
                            </div>
                            <p class="text-sm text-gray-300">{practica.descripcion}</p>
                        </article>
                    ))}
                </div>
            </div>
        </div>
    </div>
</section>

<script>
const initSlider = () => {
    const track = document.getElementById('santos-track') as HTMLElement;
    const slides = track?.children as HTMLCollectionOf<HTMLElement>;
    const prevButton = document.getElementById('prev-slide');
    const nextButton = document.getElementById('next-slide');
    
    if (!track || !slides.length || !prevButton || !nextButton) return;

    let currentIndex = 0;
    const slideWidth = slides[0].offsetWidth;

    const moveToSlide = (index: number) => {
        const targetIndex = (index + slides.length) % slides.length;
        currentIndex = targetIndex;
        track.style.transform = `translateX(-${targetIndex * slideWidth}px)`;
    };

    // Clonar el primer y 칰ltimo slide para el efecto infinito
    const firstClone = slides[0].cloneNode(true);
    const lastClone = slides[slides.length - 1].cloneNode(true);
    track.appendChild(firstClone);
    track.insertBefore(lastClone, slides[0]);

    // Ajustar posici칩n inicial
    track.style.transform = `translateX(-${slideWidth}px)`;

    prevButton.addEventListener('click', () => moveToSlide(currentIndex - 1));
    nextButton.addEventListener('click', () => moveToSlide(currentIndex + 1));

    // Manejar transici칩n suave al final/inicio
    track.addEventListener('transitionend', () => {
        if (currentIndex === slides.length) {
            track.style.transition = 'none';
            currentIndex = 0;
            track.style.transform = `translateX(-${slideWidth}px)`;
            setTimeout(() => {
                track.style.transition = 'transform 500ms ease-in-out';
            }, 10);
        }
        if (currentIndex === -1) {
            track.style.transition = 'none';
            currentIndex = slides.length - 1;
            track.style.transform = `translateX(-${(slides.length) * slideWidth}px)`;
            setTimeout(() => {
                track.style.transition = 'transform 500ms ease-in-out';
            }, 10);
        }
    });
};

document.addEventListener('astro:page-load', initSlider);
</script>

<style>
@media (prefers-reduced-motion: reduce) {
    .transition-all,
    .transition-transform,
    .transition-colors,
    .transform,
    .group-hover\:scale-105,
    .group-hover\:opacity-100,
    .group-hover\:bg-white\/10 {
        transition: none !important;
        transform: none !important;
        animation: none !important;
    }
}
</style>