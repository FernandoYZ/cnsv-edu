---
import { Image } from 'astro:assets';
import heroImage1 from '@assets/images/donation.webp';
import data from '@data';
const { visitanos}  = data;

const imagenes_slider = {
    'donation.webp': heroImage1,
} as const

const carrouselData = visitanos.sliders.map(imagen => ({
    ...imagen,
    src: imagenes_slider[imagen.src as keyof typeof imagenes_slider]
}))

---

<section class="relative min-h-screen py-16 lg:py-24 overflow-hidden bg-white" aria-labelledby="visit-title">
    <!-- Elementos decorativos -->
    <div class="absolute inset-0">
        <!-- Patrón de fondo sutil -->
        <div class="absolute inset-0" 
             style="background-image: radial-gradient(#800020 0.5px, transparent 0.5px);
                    background-size: 24px 24px;
                    opacity: 0.05;">
        </div>
        
        <!-- Formas decorativas -->
        <div class="absolute top-0 right-0 w-1/2 h-1/2 bg-gradient-to-br from-[#800020]/10 to-transparent blur-3xl"></div>
        <div class="absolute bottom-0 -mb-16 left-0 w-1/2 h-1/2 bg-gradient-to-tr from-[#800020]/10 to-transparent blur-3xl"></div>
    </div>

    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid lg:grid-cols-2 gap-12 lg:gap-20 items-center">
            <!-- Columna de Contenido -->
            <div class="relative z-10">
                <!-- Badge animado -->
                <div class="inline-flex items-center gap-2 mb-8 animate-badge">
                    <span class="relative flex h-2 w-2">
                        <span class="ping absolute inline-flex h-full w-full rounded-full bg-[#800020] opacity-75"></span>
                        <span class="relative inline-flex rounded-full h-2 w-2 bg-[#800020]"></span>
                    </span>
                    <span class="px-3 py-1 text-sm font-medium text-[#800020] bg-[#800020]/5 rounded-full tracking-wider">
                        {visitanos.header.label}
                    </span>
                </div>

                <!-- Contenido principal -->
                <div class="space-y-3">
                    <h1 id="visit-title" class="animate-title text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 leading-tight">
                        {visitanos.header.titulo}
                        <span class="relative whitespace-nowrap text-[#800020]">
                            <svg aria-hidden="true" viewBox="0 0 418 42" class="absolute left-0 top-full h-[0.4em] w-full fill-[#800020]/20" preserveAspectRatio="none">
                                <path d={visitanos.header.icono} />
                            </svg>
                            <span class="relative">{visitanos.header.span}</span>
                        </span>
                    </h1>

                    <p class="animate-description text-base text-gray-600 leading-relaxed max-w-2xl">
                        {visitanos.header.descripcion}
                    </p>

                    <!-- CTA -->
                    <div class="flex flex-col sm:flex-row gap-4 pt-4 animate-cta">
                        <a 
                            href="#tour-virtual"
                            class="cta-secondary inline-flex items-center justify-center px-6 py-3 text-base font-medium rounded-lg text-[#800020] bg-[#800020]/5"
                        >
                        Tour Virtual 360°
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                        </a>
                    </div>
                </div>

                <!-- Características -->
                <div class="grid sm:grid-cols-3 gap-6 mt-16 animate-features">
                    {visitanos.features.map(feature => (
                        <div class="feature-card group relative">
                            <div class="absolute -inset-2 bg-gradient-to-r from-[#800020]/10 to-transparent opacity-0 group-hover:opacity-100 transition-all duration-300 blur-xl rounded-xl"></div>
                            <div class="hidden lg:block relative p-6 bg-white h-full rounded-xl shadow-sm border border-gray-100">
                                <div class="flex flex-col items-center justify-center space-y-4">
                                    <span class="icon-container flex items-center justify-center w-12 h-12 rounded-xl bg-[#800020]/10 text-[#800020]">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d={feature.icon} />
                                        </svg>
                                    </span>
                                    <div class="flex items-center justify-center">
                                        <h3 class="text-sm text-center font-semibold text-gray-700">{feature.title}</h3>
                                    </div>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            </div>

            <!-- Carrusel Mejorado -->
            <div class="relative lg:h-[36rem] animate-carousel">
                <!-- Contenedor del carrusel con máscara de desvanecimiento -->
                <div class="relative overflow-hidden rounded-2xl shadow-xl bg-gray-900" id="carousel-container">
                    <!-- Track del carrusel -->
                    <div class="relative flex transition-transform duration-700 ease-out" id="carousel-track">
                        {[...carrouselData, carrouselData[0]].map((image, index) => (
                            <div class="relative w-full flex-shrink-0">
                                <div class="relative aspect-[4/3] overflow-hidden">
                                    <Image
                                        src={image.src}
                                        alt={image.title}
                                        class="w-full h-full object-cover transition-transform duration-700 hover:scale-105"
                                        loading={index === 0 ? "eager" : "lazy"}
                                        width={800}
                                        height={600}
                                    />
                                    <!-- Gradiente y contenido -->
                                    <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent">
                                        <div class="absolute bottom-0 left-0 right-0 p-8">
                                            <div class="transform transition-transform duration-300">
                                                <h3 class="text-2xl font-bold text-white mb-2">{image.title}</h3>
                                                <p class="text-white/90">{image.description}</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>

                    <!-- Controles -->
                    <div class="absolute top-1/2 -translate-y-1/2 left-4 right-4 flex justify-between pointer-events-none">
                        <button 
                            class="w-10 h-10 rounded-full bg-white/90 shadow-lg flex items-center justify-center text-gray-800 pointer-events-auto hover:bg-white transition-colors duration-300"
                            id="prev-slide"
                            aria-label="Imagen anterior"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                            </svg>
                        </button>
                        <button 
                            class="w-10 h-10 rounded-full bg-white/90 shadow-lg flex items-center justify-center text-gray-800 pointer-events-auto hover:bg-white transition-colors duration-300"
                            id="next-slide"
                            aria-label="Siguiente imagen"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                        </button>
                    </div>

                    <!-- Indicadores -->
                    <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2">
                        {carrouselData.map((_, index) => (
                            <button
                                class="w-2.5 h-2.5 rounded-full transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-900 indicator-dot"
                                data-index={index}
                                aria-label={`Ir a la imagen ${index + 1}`}
                            >
                                <span class="sr-only">Imagen {index + 1}</span>
                            </button>
                        ))}
                    </div>
                </div>

                <!-- Badge flotante con estadísticas -->
                <div class="hidden lg:block absolute -bottom-6 left-8 right-8 animate-stats">
                    <div class="bg-white rounded-xl shadow-lg p-4 border border-gray-100">
                        <div class="grid grid-cols-3 gap-4 text-center">
                            {visitanos.badge.map(badge => (
                                <div class="flex flex-col items-center justify-center">
                                    <p class="text-2xl font-bold text-[#800020]">{badge.titulo}</p>
                                    <p class="text-sm text-gray-600">{badge.descripcion}</p>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
const initEnhancedCarousel = () => {
    const track = document.getElementById('carousel-track');
    const prevButton = document.getElementById('prev-slide');
    const nextButton = document.getElementById('next-slide');
    const indicators = document.querySelectorAll('.indicator-dot');
    const slides = track?.children;
    
    if (!track || !slides || slides.length === 0) return;

    let currentIndex = 0;
    const totalSlides = slides.length - 1; // Restamos 1 por el slide duplicado
    let isTransitioning = false;

    const updateIndicators = (index: number) => {
        indicators.forEach((dot, i) => {
            const isActive = i === index;
            dot.classList.toggle('bg-white', isActive);
            dot.classList.toggle('bg-white/30', !isActive);
        });
    };

    const updateSlidePosition = (index: number, animate = true) => {
        if (isTransitioning) return;
        
        if (!animate) {
            track.style.transition = 'none';
        } else {
            track.style.transition = 'transform 700ms ease-out';
        }

        track.style.transform = `translateX(-${index * 100}%)`;
        updateIndicators(index < totalSlides ? index : 0);
    };

    const moveToSlide = (index: number) => {
        isTransitioning = true;
        currentIndex = index;
        updateSlidePosition(currentIndex);

        // Manejar el loop infinito
        if (currentIndex >= totalSlides) {
            setTimeout(() => {
                updateSlidePosition(0, false);
                currentIndex = 0;
                setTimeout(() => {
                    track.style.transition = 'transform 700ms ease-out';
                }, 50);
            }, 700);
        }
    };

    // Event Listeners
    prevButton?.addEventListener('click', () => {
        if (currentIndex <= 0) {
            moveToSlide(totalSlides - 1);
        } else {
            moveToSlide(currentIndex - 1);
        }
    });

    nextButton?.addEventListener('click', () => {
        moveToSlide(currentIndex + 1);
    });

    // Indicadores
    indicators.forEach((dot, index) => {
        dot.addEventListener('click', () => {
            moveToSlide(index);
        });
    });

    // Transición completada
    track.addEventListener('transitionend', () => {
        isTransitioning = false;
    });

    // Touch events
    let startX: number;
    let isDragging = false;
    let startPos = 0;

    const handleTouchStart = (e: TouchEvent) => {
        isDragging = true;
        startX = e.touches[0].clientX;
        startPos = currentIndex * -100;
        stopAutoplay();
    };

    const handleTouchMove = (e: TouchEvent) => {
        if (!isDragging) return;
        
        const currentX = e.touches[0].clientX;
        const diff = (currentX - startX) / track.clientWidth * 100;
        const newPos = startPos + diff;
        
        track.style.transition = 'none';
        track.style.transform = `translateX(${newPos}%)`;
    };

    const handleTouchEnd = (e: TouchEvent) => {
        if (!isDragging) return;
        isDragging = false;

        const currentX = e.changedTouches[0].clientX;
        const diff = currentX - startX;
        
        if (Math.abs(diff) > 50) {
            if (diff > 0) {
                moveToSlide(currentIndex - 1);
            } else {
                moveToSlide(currentIndex + 1);
            }
        } else {
            moveToSlide(currentIndex);
        }

        startAutoplay();
    };

    // Autoplay
    let autoplayInterval: number;
    
    const startAutoplay = () => {
        autoplayInterval = setInterval(() => {
            moveToSlide(currentIndex + 1);
        }, 5000) as unknown as number;
    };

    const stopAutoplay = () => {
        clearInterval(autoplayInterval);
    };

    // Setup inicial
    updateIndicators(0);
    startAutoplay();

    // Event listeners
    track.addEventListener('touchstart', handleTouchStart);
    track.addEventListener('touchmove', handleTouchMove);
    track.addEventListener('touchend', handleTouchEnd);
    track.addEventListener('mouseenter', stopAutoplay);
    track.addEventListener('mouseleave', startAutoplay);

    // Cleanup
    return () => {
        clearInterval(autoplayInterval);
        track.removeEventListener('touchstart', handleTouchStart);
        track.removeEventListener('touchmove', handleTouchMove);
        track.removeEventListener('touchend', handleTouchEnd);
        track.removeEventListener('mouseenter', stopAutoplay);
        track.removeEventListener('mouseleave', startAutoplay);
    };
};

document.addEventListener('astro:page-load', initEnhancedCarousel);
</script>

<style>
/* Animaciones y transiciones */
.transition-transform {
    transition-property: transform;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 700ms;
}

.transition-opacity {
    transition-property: opacity;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
}

.transition-colors {
    transition-property: background-color, border-color, color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
}

/* Optimizaciones para dispositivos táctiles */
@media (hover: none) {
    .indicator-dot {
        min-height: 24px;
        min-width: 24px;
    }
}

/* Soporte para preferencias de movimiento reducido */
@media (prefers-reduced-motion: reduce) {
    .transition-transform,
    .transition-opacity,
    .transition-colors,
    .hover\:scale-105,
    .animate-ping {
        transition: none !important;
        animation: none !important;
        transform: none !important;
    }
}

/* Mejoras de rendimiento */
#carousel-track {
    backface-visibility: hidden;
    transform: translateZ(0);
    will-change: transform;
}

/* Mejoras de accesibilidad */
.indicator-dot:focus-visible,
button:focus-visible {
    outline: 2px solid white;
    outline-offset: 2px;
}
.animate-title {
    opacity: 0;
    animation: fadeSlideUp 0.8s cubic-bezier(0.22, 1, 0.36, 1) forwards;
}

.animate-description {
    opacity: 0;
    animation: fadeSlideUp 0.8s cubic-bezier(0.22, 1, 0.36, 1) forwards;
    animation-delay: 0.2s;
}

.animate-cta {
    opacity: 0;
    animation: fadeSlideUp 0.8s cubic-bezier(0.22, 1, 0.36, 1) forwards;
    animation-delay: 0.4s;
}

.animate-features {
    opacity: 0;
    animation: fadeSlideUp 0.8s cubic-bezier(0.22, 1, 0.36, 1) forwards;
    animation-delay: 0.6s;
}

.animate-carousel {
    opacity: 0;
    animation: fadeReveal 1s cubic-bezier(0.22, 1, 0.36, 1) forwards;
    animation-delay: 0.4s;
}

.animate-stats {
    opacity: 0;
    animation: fadeSlideUp 0.8s cubic-bezier(0.22, 1, 0.36, 1) forwards;
    animation-delay: 0.8s;
}

/* Animación para el badge con ping effect */
.animate-badge {
    animation: fadeScale 0.6s cubic-bezier(0.22, 1, 0.36, 1) forwards;
}

.animate-badge .ping {
    animation: ping 2s cubic-bezier(0, 0, 0.2, 1) infinite;
}

/* Feature cards hover animation */
.feature-card {
    transition: transform 0.3s cubic-bezier(0.22, 1, 0.36, 1),
                box-shadow 0.3s cubic-bezier(0.22, 1, 0.36, 1);
}

.feature-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 24px -8px rgba(128, 0, 32, 0.15);
}

.feature-card .icon-container {
    transition: transform 0.3s cubic-bezier(0.22, 1, 0.36, 1);
}

.feature-card:hover .icon-container {
    transform: scale(1.1);
}

/* Animaciones para el carrusel */
.slide-content {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.5s ease, transform 0.5s ease;
}

.active-slide .slide-content {
    opacity: 1;
    transform: translateY(0);
}

/* Keyframes definitions */
@keyframes fadeSlideUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes fadeReveal {
    from {
        opacity: 0;
        transform: scale(0.98);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

@keyframes fadeScale {
    from {
        opacity: 0;
        transform: scale(0.9);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

@keyframes ping {
    75%, 100% {
        transform: scale(2);
        opacity: 0;
    }
}

/* Animaciones para las estadísticas flotantes */
.stat-number {
    opacity: 0;
    transform: translateY(10px);
    animation: countUp 1.5s cubic-bezier(0.22, 1, 0.36, 1) forwards;
    animation-delay: 1s;
}

@keyframes countUp {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Clases para las transiciones de hover en los CTAs */
.cta-primary {
    transition: all 0.3s cubic-bezier(0.22, 1, 0.36, 1);
    position: relative;
    overflow: hidden;
}

.cta-primary::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(120deg, transparent 0%, transparent 50%, rgba(255,255,255,0.1) 50%, transparent 100%);
    transform: translateX(-100%);
    transition: transform 0.6s cubic-bezier(0.22, 1, 0.36, 1);
}

.cta-primary:hover::after {
    transform: translateX(100%);
}

.cta-secondary {
    transition: all 0.3s cubic-bezier(0.22, 1, 0.36, 1);
}

.cta-secondary:hover {
    background-color: rgba(128, 0, 32, 0.1);
    transform: translateY(-2px);
}

/* Media query para preferencias de movimiento reducido */
@media (prefers-reduced-motion: reduce) {
    .animate-title,
    .animate-description,
    .animate-cta,
    .animate-features,
    .animate-carousel,
    .animate-stats,
    .animate-badge,
    .feature-card,
    .slide-content,
    .stat-number,
    .cta-primary,
    .cta-secondary {
        animation: none !important;
        transition: none !important;
        transform: none !important;
        opacity: 1 !important;
    }

    .cta-primary::after {
        display: none;
    }
}
</style>