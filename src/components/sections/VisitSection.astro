---
import { Image } from 'astro:assets';
import heroImage1 from '@assets/images/donation.webp';
import heroImage2 from '@assets/images/gallery/frontis.webp';
import heroImage3 from '@assets/images/gallery/dia_juventud.webp';
import data from '@data';
const { visitanos}  = data;

const imagenes_slider = {
    'donation.webp': heroImage1,
    'frontis.webp': heroImage2,
    'dia_juventud.webp': heroImage3
} as const

const carrouselData = visitanos.sliders.map(imagen => ({
    ...imagen,
    src: imagenes_slider[imagen.src as keyof typeof imagenes_slider]
}))

---

<section class="relative py-24 lg:py-28 min-h-[calc(100vh-64px)] bg-white" aria-labelledby="visit-title">
    <!-- Elementos decorativos optimizados -->
    <div class="absolute inset-0">
        <div class="absolute inset-0" 
             style="background-image: radial-gradient(#800020 0.5px, transparent 0.5px);
                    background-size: 24px 24px;
                    opacity: 0.03;">
        </div>
        <!-- Formas decorativas -->
        <div class="absolute top-0 right-0 w-1/2 h-1/2 bg-gradient-to-br from-[#800020]/10 to-transparent blur-3xl"></div>
        <div class="absolute bottom-0 -mb-16 left-0 w-1/2 h-1/2 bg-gradient-to-tr from-[#800020]/10 to-transparent blur-3xl"></div>
    </div>

    <div class="relative h-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid lg:grid-cols-2 gap-8 lg:gap-16 h-full items-center">
            <!-- Columna de Contenido -->
            <div class="relative z-10 flex flex-col">
                <!-- Badge optimizado -->
                <div class="inline-flex items-center gap-2 mb-6 animate-badge">
                    <span class="relative flex h-2 w-2">
                        <span class="ping absolute inline-flex h-full w-full rounded-full bg-[#800020] opacity-75"></span>
                        <span class="relative inline-flex rounded-full h-2 w-2 bg-[#800020]"></span>
                    </span>
                    <span class="px-3 py-1.5 text-sm font-medium text-[#800020] bg-[#800020]/5 rounded-full">
                        {visitanos.header.label}
                    </span>
                </div>

                <!-- Contenido principal optimizado -->
                <div class="space-y-6">
                    <h1 id="visit-title" class="animate-title text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 leading-tight tracking-tight">
                        {visitanos.header.titulo}
                        <span class="relative whitespace-nowrap text-[#800020]">
                            <svg aria-hidden="true" viewBox="0 0 418 42" class="absolute left-0 top-[90%] h-[0.4em] w-full fill-[#800020]/20" preserveAspectRatio="none">
                                <path d={visitanos.header.icono} />
                            </svg>
                            <span class="relative">{visitanos.header.span}</span>
                        </span>
                    </h1>

                    <p class="animate-description text-base sm:text-lg text-gray-600 leading-relaxed max-w-xl">
                        {visitanos.header.descripcion}
                    </p>

                    <!-- CTA optimizado -->
                    <div class="flex flex-col sm:flex-row gap-3 pt-2 animate-cta">
                        <a 
                            href="#tour-virtual"
                            class="cta-secondary inline-flex items-center justify-center px-6 py-3 text-base font-medium rounded-lg text-[#800020] bg-[#800020]/5 hover:bg-[#800020]/10 transition-colors"
                        >
                            Tour Virtual 360°
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                        </a>
                    </div>

                    <!-- Features optimizadas para móvil -->
                    <div class="grid grid-cols-2 sm:grid-cols-3 gap-4 mt-8 animate-features">
                        {visitanos.features.map(feature => (
                            <div class="feature-card group">
                                <div class="relative p-4 lg:p-5 bg-white rounded-lg shadow-sm border border-gray-100 hover:border-[#800020]/20 transition-all duration-300">
                                    <div class="flex flex-col items-center gap-3 text-center">
                                        <span class="flex items-center justify-center w-10 h-10 rounded-lg bg-[#800020]/5 text-[#800020] transition-transform group-hover:scale-110">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d={feature.icon} />
                                            </svg>
                                        </span>
                                        <h3 class="text-sm font-medium text-gray-900 group-hover:text-[#800020] transition-colors">
                                            {feature.title}
                                        </h3>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <!-- Carrusel Optimizado -->
            <div class="relative animate-carousel">
                <div class="relative rounded-xl overflow-hidden bg-gray-900 shadow-lg aspect-[4/3]" id="carousel-container">
                    <!-- Track del carrusel -->
                    <div class="relative flex h-full" id="carousel-track">
                        {[...carrouselData, carrouselData[0]].map((image, index) => (
                            <div class="relative w-full flex-shrink-0">
                                <div class="relative h-full overflow-hidden">
                                    <Image
                                        src={image.src}
                                        alt={image.title}
                                        class="w-full h-full object-cover transition-transform duration-500 hover:scale-105"
                                        loading={index === 0 ? "eager" : "lazy"}
                                        width={800}
                                        height={600}
                                    />
                                    <!-- Contenido optimizado -->
                                    <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent">
                                        <div class="absolute bottom-0 left-0 right-0 p-6 transform transition-transform duration-300">
                                            <h3 class="text-xl sm:text-2xl font-bold text-white mb-2">{image.title}</h3>
                                            <p class="text-sm sm:text-base text-white/90 line-clamp-2">{image.description}</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>

                    <!-- Controles optimizados -->
                    <div class="absolute top-1/2 -translate-y-1/2 left-2 right-2 flex justify-between pointer-events-none">
                        <button 
                            class="w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-white/90 shadow-lg flex items-center justify-center text-gray-800 pointer-events-auto hover:bg-white transition-colors"
                            id="prev-slide"
                            aria-label="Imagen anterior"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                            </svg>
                        </button>
                        <button 
                            class="w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-white/90 shadow-lg flex items-center justify-center text-gray-800 pointer-events-auto hover:bg-white transition-colors"
                            id="next-slide"
                            aria-label="Siguiente imagen"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
const initEnhancedCarousel = () => {
    const track = document.getElementById('carousel-track');
    const prevButton = document.getElementById('prev-slide');
    const nextButton = document.getElementById('next-slide');
    const indicators = document.querySelectorAll('.indicator-dot');
    const slides = track?.children;
    
    if (!track || !slides || slides.length === 0) return;

    let currentIndex = 0;
    const totalSlides = slides.length - 1; // Restamos 1 por el slide duplicado
    let isTransitioning = false;

    const updateIndicators = (index: number) => {
        indicators.forEach((dot, i) => {
            const isActive = i === index;
            dot.classList.toggle('bg-white', isActive);
            dot.classList.toggle('bg-white/30', !isActive);
        });
    };

    const updateSlidePosition = (index: number, animate = true) => {
        if (isTransitioning) return;
        
        if (!animate) {
            track.style.transition = 'none';
        } else {
            track.style.transition = 'transform 700ms ease-out';
        }

        track.style.transform = `translateX(-${index * 100}%)`;
        updateIndicators(index < totalSlides ? index : 0);
    };

    const moveToSlide = (index: number) => {
        isTransitioning = true;
        currentIndex = index;
        updateSlidePosition(currentIndex);

        // Manejar el loop infinito
        if (currentIndex >= totalSlides) {
            setTimeout(() => {
                updateSlidePosition(0, false);
                currentIndex = 0;
                setTimeout(() => {
                    track.style.transition = 'transform 700ms ease-out';
                }, 50);
            }, 700);
        }
    };

    // Event Listeners
    prevButton?.addEventListener('click', () => {
        if (currentIndex <= 0) {
            moveToSlide(totalSlides - 1);
        } else {
            moveToSlide(currentIndex - 1);
        }
    });

    nextButton?.addEventListener('click', () => {
        moveToSlide(currentIndex + 1);
    });

    // Indicadores
    indicators.forEach((dot, index) => {
        dot.addEventListener('click', () => {
            moveToSlide(index);
        });
    });

    // Transición completada
    track.addEventListener('transitionend', () => {
        isTransitioning = false;
    });

    // Touch events
    let startX: number;
    let isDragging = false;
    let startPos = 0;

    const handleTouchStart = (e: TouchEvent) => {
        if (isTransitioning) return;
        isDragging = true;
        startX = e.touches[0].clientX;
        startPos = currentIndex * -100;
        track.style.transition = 'none';
        stopAutoplay();
    };

    const handleTouchMove = (e: TouchEvent) => {
        if (!isDragging) return;
        
        const currentX = e.touches[0].clientX;
        const diff = (currentX - startX) / track.clientWidth * 100;
        const newPos = startPos + diff;
        
        track.style.transition = 'none';
        track.style.transform = `translateX(${newPos}%)`;
    };

    const handleTouchEnd = (e: TouchEvent) => {
        if (!isDragging) return;
        isDragging = false;
        
        const currentX = e.changedTouches[0].clientX;
        const diff = currentX - startX;
        const threshold = track.clientWidth * 0.2; // 20% del ancho
        
        if (Math.abs(diff) > threshold) {
            if (diff > 0) {
                moveToSlide(currentIndex - 1);
            } else {
                moveToSlide(currentIndex + 1);
            }
        } else {
            moveToSlide(currentIndex);
        }
        
        startAutoplay();
    };

    // Autoplay
    let autoplayInterval: number;
    
    const startAutoplay = () => {
        stopAutoplay();
        if (document.visibilityState === 'visible') {
            autoplayInterval = setInterval(() => {
                if (!isTransitioning) {
                    moveToSlide(currentIndex + 1);
                }
            }, 5000) as unknown as number;
        }
    };

    const stopAutoplay = () => {
        clearInterval(autoplayInterval);
    };

    // Manejo de visibilidad de página
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
            startAutoplay();
        } else {
            stopAutoplay();
        }
    });

    // Setup inicial
    updateIndicators(0);
    startAutoplay();

    // Event listeners
    track.addEventListener('touchstart', handleTouchStart);
    track.addEventListener('touchmove', handleTouchMove);
    track.addEventListener('touchend', handleTouchEnd);
    track.addEventListener('mouseenter', stopAutoplay);
    track.addEventListener('mouseleave', startAutoplay);

    // Cleanup
    return () => {
        clearInterval(autoplayInterval);
        track.removeEventListener('touchstart', handleTouchStart);
        track.removeEventListener('touchmove', handleTouchMove);
        track.removeEventListener('touchend', handleTouchEnd);
        track.removeEventListener('mouseenter', stopAutoplay);
        track.removeEventListener('mouseleave', startAutoplay);
    };
};

document.addEventListener('astro:page-load', initEnhancedCarousel);
</script>

<style>
    /* Base Transitions */
    .transition-transform {
        transition-property: transform;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 500ms;
    }
    
    .transition-opacity {
        transition-property: opacity;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 300ms;
    }
    
    .transition-colors {
        transition-property: background-color, border-color, color, fill, stroke;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        transition-duration: 300ms;
    }
    
    /* Animaciones Principales */
    @keyframes fadeSlideUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @keyframes fadeReveal {
        from {
            opacity: 0;
            transform: scale(0.99);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }
    
    @keyframes fadeScale {
        from {
            opacity: 0;
            transform: scale(0.95);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }
    
    @keyframes ping {
        75%, 100% {
            transform: scale(2);
            opacity: 0;
        }
    }
    
    @keyframes float {
        0%, 100% {
            transform: translateY(0);
        }
        50% {
            transform: translateY(-10px);
        }
    }
    
    /* Clases de Animación */
    .animate-title {
        opacity: 0;
        animation: fadeSlideUp 0.6s cubic-bezier(0.22, 1, 0.36, 1) forwards;
    }
    
    .animate-description {
        opacity: 0;
        animation: fadeSlideUp 0.6s cubic-bezier(0.22, 1, 0.36, 1) forwards;
        animation-delay: 0.1s;
    }
    
    .animate-cta {
        opacity: 0;
        animation: fadeSlideUp 0.6s cubic-bezier(0.22, 1, 0.36, 1) forwards;
        animation-delay: 0.2s;
    }
    
    .animate-features {
        opacity: 0;
        animation: fadeSlideUp 0.6s cubic-bezier(0.22, 1, 0.36, 1) forwards;
        animation-delay: 0.3s;
    }
    
    .animate-carousel {
        opacity: 0;
        animation: fadeReveal 0.8s cubic-bezier(0.22, 1, 0.36, 1) forwards;
        animation-delay: 0.2s;
    }
        
    .animate-badge {
        animation: fadeScale 0.6s cubic-bezier(0.22, 1, 0.36, 1) forwards;
    }
    
    .animate-badge .ping {
        animation: ping 2s cubic-bezier(0, 0, 0.2, 1) infinite;
    }
    
    /* Estilos de Componentes */
    .feature-card {
        transition: all 0.3s cubic-bezier(0.22, 1, 0.36, 1);
    }
    
    .feature-card:hover {
        transform: translateY(-2px);
    }
    
    .feature-card:active {
        transform: translateY(0);
    }
    
    /* Estilos del Carrusel */
    #carousel-track {
        backface-visibility: hidden;
        transform: translateZ(0);
        will-change: transform;
    }
    
    .indicator-dot {
        transition: all 0.2s ease-in-out;
    }
    
    .indicator-dot.active {
        background-color: rgba(255, 255, 255, 1);
        transform: scale(1.2);
    }
    
    /* Estilos de los CTAs */
    .cta-secondary {
        transition: all 0.3s cubic-bezier(0.22, 1, 0.36, 1);
    }
    
    .cta-secondary:hover {
        background-color: rgba(128, 0, 32, 0.1);
        transform: translateY(-2px);
    }
    
    .cta-secondary:active {
        transform: translateY(0);
    }
    
    /* Optimizaciones para Dispositivos Táctiles */
    @media (hover: none) {
        .indicator-dot {
            min-height: 20px;
            min-width: 20px;
        }
        
        .feature-card:hover {
            transform: none;
        }
        
        .cta-secondary:hover {
            transform: none;
        }
    }
    
    /* Optimizaciones para Dispositivos Móviles */
    @media (max-width: 640px) {
        .animate-title,
        .animate-description,
        .animate-cta,
        .animate-features,
        .animate-carousel {
            animation-duration: 0.5s;
        }
        
        .feature-card {
            padding: 0.75rem;
        }
    }
    
    /* Mejoras de Rendimiento */
    @media (prefers-reduced-motion: reduce) {
        .animate-title,
        .animate-description,
        .animate-cta,
        .animate-features,
        .animate-carousel,
        .animate-badge,
        .indicator-dot,
        .feature-card,
        .cta-secondary,
        .transition-transform,
        .transition-opacity,
        .transition-colors {
            animation: none !important;
            transition: none !important;
            transform: none !important;
        }
        
        .ping {
            animation: none !important;
        }
    }
    
    /* Mejoras de Accesibilidad */
    .indicator-dot:focus-visible,
    button:focus-visible {
        outline: 2px solid white;
        outline-offset: 2px;
    }
    
    /* Mejoras en el Contraste */
    @media (prefers-contrast: more) {
        .text-gray-600 {
            color: #4B5563;
        }
        
        .bg-[#800020]/5 {
            background-color: rgba(128, 0, 32, 0.1);
        }
    }
    
    /* Print Styles */
    @media print {
        .animate-title,
        .animate-description,
        .animate-cta,
        .animate-features,
        .animate-carousel,
        .animate-badge {
            animation: none !important;
            opacity: 1 !important;
        }
        
        .indicator-dot,
        .carousel-controls {
            display: none !important;
        }
    }
</style>