---
import data from '@data';
const { navegacion } = data;
const currentPath = Astro.url.pathname;
---

<div class="lg:hidden">
    <!-- Espaciador para evitar que el contenido se oculte detrás del navbar -->
    
    
    <!-- Gradiente de fondo -->
    <div 
        class="fixed bottom-0 left-0 w-full h-20 bg-gradient-to-t from-gray-950/90 to-transparent pointer-events-none z-40"
        style="view-transition-name: nav-gradient;"
    ></div>
    
    <!-- Navegación móvil -->
    <nav 
        class="fixed bottom-0 left-0 w-full transition-transform duration-500 ease-out will-change-transform translate-y-0 z-50"
        style="view-transition-name: mobile-nav;"
        aria-label="Navegación móvil"
        id="mobile-nav"
    >
        <div 
            class="mx-4 mb-4 bg-white/90 backdrop-blur-xl rounded-2xl shadow-lg shadow-black/5 border border-gray-100/50 transition-colors duration-300"
            style="view-transition-name: nav-container;"
        >
            <ul class="flex items-center justify-around h-16 px-2 relative">
                {navegacion.movil.map((item) => {
                    const isActive = currentPath === item.href;
                    
                    return (
                        <li class="relative">
                            <a
                                href={item.href}
                                data-astro-prefetch
                                class:list={[
                                    "relative flex flex-col items-center w-16 py-2 transition-transform duration-300 hover:scale-105 active:scale-95",
                                ]}
                                aria-current={isActive ? 'page' : undefined}
                            >
                                {/* Línea indicadora */}
                                {isActive && (
                                    <div 
                                        class="absolute -top-1.5 left-1/2 -translate-x-1/2 w-8 h-[3.5px] bg-[#800020] rounded-b-full shadow-sm"
                                        style="view-transition-name: nav-indicator;"
                                        aria-hidden="true"
                                    />
                                )}
                                
                                <div class:list={[
                                    "transition-transform duration-300 ease-out",
                                    isActive ? "-translate-y-1" : "group-hover:-translate-y-0.5"
                                ]}>
                                    <div class:list={[
                                        "transition-colors duration-300",
                                        isActive ? "text-[#800020]" : "text-gray-400 group-hover:text-gray-600"
                                    ]}>
                                        <Fragment set:html={item.icon} />
                                    </div>
                                </div>

                                <span class:list={[
                                    "text-xs font-medium mt-1 transition-colors duration-300",
                                    isActive ? "text-[#800020]" : "text-gray-500 group-hover:text-gray-700"
                                ]}>
                                    {item.label}
                                </span>
                            </a>
                        </li>
                    );
                })}
            </ul>
        </div>
    </nav>
</div>

<style>
/* Asegura que el contenido no se oculte detrás del navbar en dispositivos con "notch" */
@supports (padding: max(0px)) {
    .h-safe-area-bottom {
        height: max(24px, env(safe-area-inset-bottom));
    }
}

/* Mejora las transiciones */
.transition-transform {
    backface-visibility: hidden;
    transform: translateZ(0);
}
</style>

<script>
class NavbarController {
    private static SCROLL_THRESHOLD = 10;
    private static TOUCH_THRESHOLD = 5;
    
    private lastScrollY: number;
    private touchStart: number | null = null;
    private animationFrame: number | null = null;
    private nav: HTMLElement | null;
    
    constructor() {
        this.lastScrollY = window.scrollY;
        this.nav = document.getElementById('mobile-nav');
        this.init();
        // Importante: Actualizamos el estado inicial de la navegación
        this.updateNavigationState();
    }
    
    private updateNav = (show: boolean) => {
        if (!this.nav) return;
        this.nav.style.transform = show ? 'translateY(0)' : 'translateY(100%)';
    };

    private updateNavigationState = () => {
        const currentPath = window.location.pathname;
        const navItems = document.querySelectorAll('#mobile-nav a');
        
        navItems.forEach(item => {
            const href = item.getAttribute('href');
            const isActive = href === currentPath;
            
            // Actualizar estados activos
            if (isActive) {
                item.setAttribute('aria-current', 'page');
                
                // Manejar el indicador
                const indicator = item.querySelector('div[aria-hidden="true"]');
                if (!indicator) {
                    // Crear el indicador si no existe
                    const newIndicator = document.createElement('div');
                    newIndicator.className = 'absolute -top-1.5 left-1/2 -translate-x-1/2 w-8 h-[3.5px] bg-[#800020] rounded-b-full shadow-sm';
                    newIndicator.setAttribute('aria-hidden', 'true');
                    newIndicator.style.viewTransitionName = 'nav-indicator';
                    item.insertBefore(newIndicator, item.firstChild);
                }
                
                // Actualizar colores
                const iconContainer = item.querySelector('div[class*="transition-colors"]');
                if (iconContainer) {
                    iconContainer.classList.remove('text-gray-400', 'group-hover:text-gray-600');
                    iconContainer.classList.add('text-[#800020]');
                }
                
                const label = item.querySelector('span');
                if (label) {
                    label.classList.remove('text-gray-500', 'group-hover:text-gray-700');
                    label.classList.add('text-[#800020]');
                }
            } else {
                item.removeAttribute('aria-current');
                
                // Remover el indicador si existe
                const indicator = item.querySelector('div[aria-hidden="true"]');
                if (indicator) {
                    indicator.remove();
                }
                
                // Restaurar colores por defecto
                const iconContainer = item.querySelector('div[class*="transition-colors"]');
                if (iconContainer) {
                    iconContainer.classList.remove('text-[#800020]');
                    iconContainer.classList.add('text-gray-400', 'group-hover:text-gray-600');
                }
                
                const label = item.querySelector('span');
                if (label) {
                    label.classList.remove('text-[#800020]');
                    label.classList.add('text-gray-500', 'group-hover:text-gray-700');
                }
            }
        });
    };
    
    private handleScroll = () => {
        if (this.animationFrame) return;
        
        this.animationFrame = requestAnimationFrame(() => {
            const currentScrollY = window.scrollY;
            if (Math.abs(currentScrollY - this.lastScrollY) > NavbarController.SCROLL_THRESHOLD) {
                this.updateNav(currentScrollY < this.lastScrollY);
                this.lastScrollY = currentScrollY;
            }
            this.animationFrame = null;
        });
    };
    
    private handleTouchStart = (e: TouchEvent) => {
        this.touchStart = e.touches[0].clientY;
    };
    
    private handleTouchMove = (e: TouchEvent) => {
        if (this.touchStart === null) return;
        
        const touchEnd = e.touches[0].clientY;
        const diff = this.touchStart - touchEnd;
        
        if (Math.abs(diff) > NavbarController.TOUCH_THRESHOLD) {
            this.updateNav(diff > 0);
        }
        
        this.touchStart = null;
    };
    
    public init() {
        // Añadir event listeners existentes
        window.addEventListener('scroll', this.handleScroll, { passive: true });
        window.addEventListener('touchstart', this.handleTouchStart, { passive: true });
        window.addEventListener('touchmove', this.handleTouchMove, { passive: true });
        
        // Añadir listeners para las transiciones de página
        document.addEventListener('astro:after-swap', this.updateNavigationState);
        document.addEventListener('astro:page-load', this.updateNavigationState);
    }
    
    public destroy() {
        // Limpiar event listeners existentes
        window.removeEventListener('scroll', this.handleScroll);
        window.removeEventListener('touchstart', this.handleTouchStart);
        window.removeEventListener('touchmove', this.handleTouchMove);
        
        // Limpiar listeners de transiciones
        document.removeEventListener('astro:after-swap', this.updateNavigationState);
        document.removeEventListener('astro:page-load', this.updateNavigationState);
        
        // Cancelar animaciones pendientes
        if (this.animationFrame) {
            cancelAnimationFrame(this.animationFrame);
            this.animationFrame = null;
        }
    }
}

let navController: NavbarController | null = null;

// Función para reinicializar el controlador
function setupNavController() {
    // Destruir la instancia anterior si existe
    if (navController) {
        navController.destroy();
    }
    
    // Crear nueva instancia
    navController = new NavbarController();
}

// Inicializar en la carga de la página
document.addEventListener('astro:page-load', setupNavController);

// Limpiar al desmontar
document.addEventListener('astro:before-swap', () => {
    if (navController) {
        navController.destroy();
        navController = null;
    }
});
</script>